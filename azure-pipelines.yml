name: $(BuildID)

trigger:
  branches:
    include:
    - master

schedules:
- cron: "1 0 * * 1"
  displayName: 'Weekly build'
  always: true
  branches:
    include:
    - master

variables:
  Agent: 'ubuntu-latest'
  BuildConfiguration: 'Release'   # configuration to pack, does not work with build step
  Windowsx64: 'win-x64'
  Windowsx86: 'win-x86'
  Linux64: 'linux-x64'
  OSXx64: 'osx-x64'

stages:
- stage: CI
  displayName: 'Build and run tests'
  jobs:
  - job: ci
    displayName: 'Build and run tests'
    pool:
      vmImage: $(Agent)
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        arguments: '--configuration Release /p:PublishSingleFile=false'
        projects: 'LichessTournamentAggregator.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: test
        arguments: '--configuration Release --no-build --logger trx --collect "Code coverage"'
        nobuild: true
        projects: '**/*.Test.csproj'
        publishTestResults: true

- stage: CD
  displayName: 'Generate and publish artifacts'
  dependsOn: 'CI'
  condition: succeeded('CI')
  jobs:
  - job: cd
    displayName: 'Generate and publish artifacts'
    pool:
      vmImage: $(Agent)
    steps:

    - checkout: self
      persistCredentials: true
      clean: true

    - task: NuGetToolInstaller@1
      displayName: 'Setup NuGet'
      inputs:
        versionSpec: '5.3.1'
        checkLatest: true

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        arguments: '--configuration Release /p:PublishSingleFile=false'
        projects: 'LichessTournamentAggregator.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Generate NuGet package'
      inputs:
        command: 'pack'
        arguments: '--configuration Release'
        configuration: '$(BuildConfiguration)'
        packagesToPack: '**/*LichessTournamentAggregator.csproj'
        nobuild: true
        packDirectory: '$(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts'
        versioningScheme: 'off'

    - task: DotNetCoreCLI@2
      displayName: 'Generate executable for $(Windowsx64)'
      inputs:
        command: 'publish'
        arguments: '--configuration Release --runtime $(Windowsx64) --output $(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts/$(Windowsx64)'
        configuration: '$(BuildConfiguration)'
        projects: '**/*.App.csproj'
        modifyOutputPath: false
        publishWebProjects: false
        zipAfterPublish: false
        versioningScheme: 'off'

    - task: DotNetCoreCLI@2
      displayName: 'Generate executable for $(Windowsx86)'
      inputs:
        command: 'publish'
        arguments: '--configuration Release --runtime $(Windowsx86) --output $(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts/$(Windowsx86)'
        configuration: '$(BuildConfiguration)'
        projects: '**/*.App.csproj'
        modifyOutputPath: false
        publishWebProjects: false
        zipAfterPublish: false
        versioningScheme: 'off'

    - task: DotNetCoreCLI@2
      displayName: 'Generate executable for $(Linux64)'
      inputs:
        command: 'publish'
        arguments: '--configuration Release --runtime $(Linux64) --output $(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts/$(Linux64)'
        configuration: '$(BuildConfiguration)'
        projects: '**/*.App.csproj'
        modifyOutputPath: false
        publishWebProjects: false
        zipAfterPublish: false
        versioningScheme: 'off'

    - task: DotNetCoreCLI@2
      displayName: 'Generate executable for $(OSXx64)'
      inputs:
        command: 'publish'
        arguments: '--configuration Release --runtime $(OSXx64) --output $(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts/$(OSXx64)'
        configuration: '$(BuildConfiguration)'
        projects: '**/*.App.csproj'
        modifyOutputPath: false
        publishWebProjects: false
        zipAfterPublish: false
        versioningScheme: 'off'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts: NuGet package and its symbols and app executables'
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts/'
        artifactName: 'LichessTournamentAggregator'

    - task: NuGetCommand@2
      displayName: 'Push NuGet package'
      condition: and(ne(variables['Build.Reason'], 'Schedule'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      continueOnError: true
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'LichessTournamentAggregator_NuGet'
        verbosityPush: 'Detailed'

    - task: NuGetCommand@2
      displayName: 'Push GitHub package'
      condition: and(ne(variables['Build.Reason'], 'Schedule'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      continueOnError: true
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/LichessTournamentAggregator/Artifacts/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'GitHubPackageRegistry'
        verbosityPush: 'Detailed'
